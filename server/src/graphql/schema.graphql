# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey (surveyId: Int!): Survey

  events: [Event!]!
  activeEvents: [Event!]!
}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey

  # Creates a new event
  createEvent (event_input: EventInput): Event
}
input EventInput {
 # eventId: Int
   # survey (surveyId: Int!): Survey
  #event_Id (id:Int!): Event
  eventTitle: String!
  eventDesc: String!
  eventStartTime: Date!
  eventEndTime: Date!
  eventMaxGuestCount: Int!
  eventStatus: eventStatus!
  #eventLocationID:Int!
 # eventHostID:Int!
  eventGuestCount: Int!
}

type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}

enum UserType { ADMIN, USER }

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}



# Additional table definitions
scalar Date
# Extended User
type User {
  id: Int!
  userType: UserType!
  email: String!
  password: String!

  name: String!
  bio: String
  phoneNumber: String

  # Relations
  hostEvents: [Event]!
  guestEvents: [Event]!

  # Requests for events where user is host
  hostRequests: [Request]!

  # Requests for events where user is guest
  guestRequests: [Request]!
}

type Event {
  id: Int!

  title: String!

  description: String!

  startTime: Date!
  endTime: Date!

  maxGuestCount: Int!
  eventStatus: eventStatus!

  # Relations
  host: User!
  location: Location!

  # List of event attendees
  guests: [User]!

  # List of pending requests for the event
  requests: [Request]!
  # Functions
  # True if the event has started.
  isStarted: Boolean!

  # True if the event has completed.
  isCompleted: Boolean!

  # Return number of guests
  guestCount: Int!
}

enum eventStatus {OPEN, CLOSED, CANCELLED}

type Location {
  id: Int!
  building: Building!
  room: Int!
  events: [Event]!
}

type Building {
  id: Int!
  name: String!
  locations: [Location]!
}

type Request {
  id: Int!
  event: Event!
  host: User!
  guest: User!
  requestStatus: requestStatus!
}

enum requestStatus {PENDING, ACCEPTED, REJECTED}